package test

import org.scalatest.FunSuite
import atk.util.Tool
import atk.compbio.vcf.VCFLine
import abeellab.emu.VariantOverlapPartioner
import java.io.File
import abeellab.emu.EmuUtils

class PartitionTest extends FunSuite with Tool with EmuUtils {
  //arguments for testing the extraction script for Emu
  val arguments = Array(
    "-l", "test_data/variant_partitioning/allLargeVariants.vcf",
    "-r", "test_data/variant_partitioning/MT_H37RV_BRD_V5.fasta",
    "-i", "test_data/variant_partitioning/intermediate",
    "-o", "test_data/variant_partitioning")
  //Check that the overlap partitioner runs to completion
  test("Runs to completion") {
    VariantOverlapPartioner.main(arguments)
  }
  //get all files in intermediate directory
  val dir = new File("test_data/variant_partitioning/intermediate")
    .listFiles().filter(_.getName().contains("intermediate"))
  //check whether the number of partitions created is correct
  test("Expected number of partitions") {
    assert(dir.size == 14, "Unexpected number of partitions created")
  }
  //check whether the coordinates and sequence of the local reference genome for each partition is correct
  test("Accurate local reference extraction") {
    dir.foreach(partition => {
      //get file name
      val filename = partition.getName()
      //get file id (number of allocated to the end of file name)
      val fileid = filename.substring(filename.indexOf("Set") + 4, filename.indexOf(".vcf")).toInt
      //extract the local reference and variants
      val (localref: LocalReference, variants: List[Nest]) = toLocalReferenceAndNest(partition.getAbsolutePath())
      /**Method to validate localreference class*/
      def isLocalRefValid(start: Int, end: Int, seq: String): Boolean = {
        localref.start == start && localref.end == end && localref.sequence == seq
      }      
      //check whether the current extracted local reference is correct
      assert(fileid match {
        case 1 => isLocalRefValid(1584, 1605, "TCACAGAGATTGGCTGTGAGTG")
        case 2 => isLocalRefValid(24688, 24727, "GGTCGGGGTAGCCGCGTTGCTCGGGGTAACCGCGTTGCTC")
        case 3 => isLocalRefValid(49680, 49703, "GAATGGCCGTGCCCTGGAAGGTCC")
        case 4 => isLocalRefValid(55523, 55548, "TATGCCGGTGTGCCGCCGCCGCCGCC")
        case 5 => isLocalRefValid(55538, 55559, "CCGCCGCCGCCGTCGGAGGTAC")
        case 6 => isLocalRefValid(71573, 71594, "GGTGAACTCCGCTATGGCTACC")
        case 7 => isLocalRefValid(99149, 99179, "AAGCGGTTGTTCGGTGTGCGCGGCGGGCGCA")
        case 8 => isLocalRefValid(103730, 103760, "CTTGGTTGTGGAGGAATCGTTCGGGGTGGTG")
        case 9 => isLocalRefValid(104737, 104951, "TTGGGCGGTGGCGGTGGCGGTCAACTGCGGGGCCAACGGTTCGCCAGTGAGCGCCCGACGTTGCCCTAAGGCTTGGCTTCGGCGCTGCGTCGGCCGGCTTCGGGCTTGGTGATGCGCAGCCGGTTGGCCAGCGCGCAGCACAGCGTGCCGCCCAGTTCTTCCTCGCTGGCTTGGGTGTCGAGTTGGTTGATCAACGTGTGCTGGGCCGCCGGTAG")
        case 10 => isLocalRefValid(150408, 150899, "GACACGGCGGGCAAGGCGGTGGTACCGGGGGCCCACCGCTGCCCGGTCAGGCAGGCATGGGCGCCGCGGGTGGCGCCGGTGGGCTGATCGGCAACGGCGGGGCCGGCGGCGACGGCGGTGTCGGCGCGTCCGGCGGGGTCGCCGGAGTAGGCGGTGCCGGCGGGAACGCCATGCTGATCGGGCACGGCGGCGCCGGCGGCGCCGGCGGAGACAGCAGTTTCGCTAATGGCGCGGCCGGCGGCGCGGGCGGTGCCGGAGGGCACCTCTTCGGCAATGGCGGGTCCGGCGGCCACGGCGGAGCCGTCACGGCCGGCAACACCGGTATCGGTGGCGCCGGCGGCGTCGGTGGGGACGCCAGGCTGATCGGCCACGGTGGCGCCGGCGGTGCCGGCGGGGACCGCGCCGGAGCCTTGGTTGGCCGTGACGGCGGGCCCGGTGGGAACGGGGGCGCTGGCGGCCAGCTATACGGCAACGGCGGCGACGGCGCCCCCG")
        case 11 => isLocalRefValid(194293, 194314, "ACACCTGCGCCCATATAGCGCG")
        case 12 => isLocalRefValid(333661, 335839, "AAACCCGCCGGCAACCCCCGTCACCGCCGTTGCCGAACACCCCGGCGTGGCCACCGTCACCGCCGGTGCCGCCGGTACCGGCGCCTAGAGCGTTGGCACCGCTGCCGCCGGCGCCGCCGGCGCCGGCGGAGCCGAAGAGCAAGCCGCCGTTCCCGCCGGCGCCGCCGGCGCCGCCTTGCTGGATGCTGGTAAGTGCTGCCCCGCCGTGCCCGCCGGCGCCGCCGGCGCCGCCGAAGCCGAAGAGTAAGGCGCCGTTCCCGCCGGTTCCGCCGGCCCCGCCGGCAAGGGAGCTGGCGCCACCGCTGCCGCCGGCGCCACCGGAGGCGCCGAGGGAGAGTAGGCCGGCGTTGCCGCCGTGCCCGCCGCCGCCGGTGGTGATCCCGGACCCTCCCGAGCCGGCGGCGCCGCCGGTGCCGCCGGCTCCGAACAGTCCGCCGTTCCCGCCGTTCCCACCGGCCCCGAAGTTCGTGCCGGCCCCGCCGGTGCCGCCAGTTCCGAACAGTCCGCCGTTCCCGCCGTTCCCGCCGGCTGCGTTGAACCCGCCGGCCCCTCCGGCTCCGCCGTTGGCGAACAGTCCGCCGTTGCCGCCGGCGCCGCCGACGCCGGCCGGGACACCGCCAGCGGCGCCGTGGCCGCCGGTGCCGGCCGCGCCGAAGAGCAAACCGGCGTCGCCGCCGCGCCCGCCGGCCCCGCCGATGCCAGCGACGCCTATGGAGTTCCCACCGTTGCCGCCGGTGCCGCCGGAGCCGATCAGCAAGGAGACCCCACCGGCGCCGCCGGCCCCGCCGATCCCTCCAGCACCGGTGGCTATCCCGCCGGTCCCGCCATTGCCACCGGTACCGAACAAGATCCCGCCGGCCCCGCCGGCCCCGCCCGTAGCCGTGGCGGCGGTGTTGGTCGCACCGTGCCCGCCGTTACCGCCGTTGCCGAACAACCACCCGCCGGCCCCGCCGGCAGCCCCGGTCCCCGGGGTCCCGTTGGCGCCGTTGCCGAACAGCCACCCGCCGGCCCCGCCGTCAGCCCCGGTTCCAGGAGTCCCGTTGGCGCCGTTGCCGATCAGCGGGCGGCCGGTGAGCGTCTGGAAGGGCTCGTTCACCACATTGAGCACATTTTGCTGCAGGGTGTGCAGTGGCGAGGTGCTCGCGGGAGCATTGAATCCGTCTAGACCGAGCAGCAGCCCGCTGACGCCGCCCACTCCGGCCTTGCCCGCGCCAATCCCACCGCTACCGCCGTTACCGCCATTGCCGATCAACACGCCGGTGCCGCCGATCCCGCCGTTGCCGCCGGTCACCGCGCTGGCGCCACCGTTACCGCCGTTGCCGCCGTTACCGATCAGCCCGGGGGTGCCGCCAGCCCCACCGATCCCGCCGGCGAAGCCCTGGCCAACTCCGCCGTTGCCGCCGGCGCCGCCGGAGCCGAAGACCGTGCCGGCGTTGCCCCCGGGGCCGCCTTGCCCGCCGTCGGCGAAGCCGAATCCGCCGGCGCCGCCGGAGCCGCCGGAGCCGAAGAGCAGCCCAGCGTTGCCGCCGGCGCCGCCGGCGCCGCCTATGCCGCCGGCCGTGAGAGTACCGCCGTCCCCACCGATTCCGCCGGCGCCGCCCGCGGCGCCGAGGGCGAGCATGCCGGCATTGCCGCCGGCCCCGCCGTCCCCGCCGGCGACCAGGCTGTGTCCGCCGCTGCCGCCTTCCCCGCCTGCGCCGAACAGCCCGCCGGCCCCGCCGGCCCCGCCGACTCCGCCGAAGCTGCTGTCGGCGAACCCGCCATGCCCGCCGGTGCCGCCGGCGCCGAACAGCCCGCCAGCGCCACCGGCCCCACCGGCCCCGCCGGAGCTGCCGGCCCCACCGGATCCGCCGACCCCGCCGGTGGCGAACAGCCCGCCGGCCCCGCCGGCGCCGCCCGCCCCGCCGAGTGCACTGCCGTTCGTGAATCCGCCGGCCCCGCCGACTCCGGCGGCGCCGAAGAGCAGGCCGGCGTTGCCGCCAGCCCCGCCGGCGCCGCCGGCCCCGCCCGTGAGGGCTACTACGCCGCCGCCGGCGCCGCCGGCGCCGCCGGCGCCGAACAGCATGGCGTTGCCGCCGGCTCCGCCGGACCCGCCGATCCCACTGCTGGCGACCCCGCCAGCGCCGCCGGCGCCGCCGTTGCCGATGAGCCCGCCGGCGCCGCCGTTGCCGCCGGCGCC")
        case 13 => isLocalRefValid(336552, 336573, "GTTCGCGGTTACAGGCCGTTGA")
        case 14 => isLocalRefValid(362358, 362903, "CCACCGGCGGGAACGGCGGGGTCGGTGCGCCCGGCGGTGCCGGCGGCAACGGCGGCCACGTCAGCGGCGGATCGGTCAACACAGCCGGCGCCGGTGGCAAAGGCGGCAACGGCGGCACCGGCGGCGCCGGCGGCCCGGGCGGCCACGGCGGCAGCGTTCTATCCGGCCCGGTTGGCGACAGTGGCAACGGTGGTGCCGGCGGGGACGGCGGGGCCGGGGTTAGCGCCACCGATATCGCCGGCACCGGCGGGCGCGGCGGCAACGGTGGTCATGGCGGGCTGTGGATCGGCAACGGCGGCGACGGTGGTGCGGGCGGTGTCGGCGGTGTCGGCGGGGCCGGTGCGGCTGGCGCGATCGGCGGCCACGGCGGCGATGGCGGCTCCGTAAATACCCCTATTGGCGGCAGCGAGGCCGGTGACGGCGGTAAGGGCGGCCTGGGCGGGGACGGCGGTGGGCGCGGGATATTCGGCCAGTTTGGGGCCGGCGGGGCCGGTGGTGCCGGAGGCGTCGGCGGCGCCGGCGGGGCTGGCGGGACCGGCGGCGGCG")
      }, "Unexpected coordinates and sequence for local reference " + filename)
      /**Method to validate variant local coordinates*/
      def isCoordValid(start: Int, end: Int, x: Nest): Boolean = {
        x.localStart == start && x.localEnd == end
      }
      //iterate through each variant and check that calculated local coordinates are coorect
      variants.foreach(variant => {
        //get starting coordinate
        val start = variant.variant.variant.pos - localref.start
        //get ending coordinate
        val end = variant.variant.variant.pos + variant.variant.variant.ref.size - localref.start
        assert(isCoordValid(start,end,variant), 
            "Unexpected local coordinates for variant " + variant.variant.variant.toString + " in file " + 
            filename + ".\n" + "The local coordinates should have been (" + start + "," + end + ") but instead they were " +
            "(" + variant.localStart + "," + variant.localEnd + ")")
      })
    })
  }
}